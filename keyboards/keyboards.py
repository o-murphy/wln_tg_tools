from aiogram import types


def remove():
    kb = types.ReplyKeyboardRemove()
    return kb


def start(login_url):
    kb = types.InlineKeyboardMarkup(row_width=1)
    keys = [types.InlineKeyboardButton('Wialon Login', url=login_url),
            types.InlineKeyboardButton('–ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è', url='https://telegra.ph/123-09-21-35')]
    return kb.add(*keys)


def start_logged():
    kb = types.InlineKeyboardMarkup(row_width=2)
    keys = [
        types.InlineKeyboardButton('–°–ø–∏—Å–æ–∫ –æ–±—ä–µ–∫—Ç–æ–≤', callback_data='cicada'),
        types.InlineKeyboardButton('–ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è', url='https://telegra.ph/123-09-21-35'),
        # types.InlineKeyboardButton('WiaTag QR', callback_data='wiatag'),
        types.InlineKeyboardButton('üîê –í—ã–π—Ç–∏ –∏–∑ –∞–∫–∫–∞—É–Ω—Ç–∞', callback_data='logout')
    ]
    kb.add(*keys)
    return kb


def charge_to_icon(value):
    if not value:
        return '‚ö†'
    elif 75 < value <= 100:
        return f'üü© {value}%'
    elif 50 < value <= 75:
        return f'üü® {value}%'
    elif 25 < value <= 50:
        return f'üüß {value}%'
    elif 0 <= value <= 25:
        return f'üü• {value}%'
    else:
        return '‚ö†'


def cicadas(cicadas):
    kb = types.InlineKeyboardMarkup(row_width=2)
    # keys = [types.InlineKeyboardButton(i['nm'], callback_data=f'cicada/{i["id"]}') for i in cicadas]

    keys = [types.InlineKeyboardButton(f"{charge_to_icon(i['last_charge'])} | {i['nm']}",
                                       callback_data=f'cicada/{i["id"]}') for i in cicadas]
    kb.add(*keys)
    kb.row(types.InlineKeyboardButton('‚Ü© –ù–∞–∑–∞–¥', callback_data='start_cmd'),
           types.InlineKeyboardButton('–û–±–Ω–æ–≤–∏—Ç—å üîÑ', callback_data='cicada'))
    return kb


def details(object_id):
    kb = types.InlineKeyboardMarkup(row_width=2)
    keys = [
        types.InlineKeyboardButton('‚Ü© –ù–∞–∑–∞–¥', callback_data='cicada'),
        types.InlineKeyboardButton('–û–±–Ω–æ–≤–∏—Ç—å üîÑ', callback_data=f'cicada/{object_id}'),
        types.InlineKeyboardButton('üîã –°–±—Ä–æ—Å–∏—Ç—å –∑–∞—Ä—è–¥', callback_data=f'cicada/{object_id}/reset'),
        types.InlineKeyboardButton('–ö–æ–º–∞–Ω–¥—ã ‚ñ∂', callback_data=f'cicada/{object_id}/cmd'),
        types.InlineKeyboardButton('–ü–æ—Å–ª–µ–¥–Ω–µ–µ –º–µ—Å—Ç–æ–ø–æ–ª–æ–∂–µ–Ω–∏–µ üìç', callback_data=f'cicada/{object_id}/location'),
    ]
    return kb.add(*keys)


def reset_q(object_id):
    kb = types.InlineKeyboardMarkup(row_width=2)
    keys = [
        types.InlineKeyboardButton('‚Ü© –ù–∞–∑–∞–¥', callback_data=f'cicada/{object_id}'),
        types.InlineKeyboardButton('–î–∞ üÜó', callback_data=f'cicada/{object_id}/reset/ok'),
    ]
    return kb.add(*keys)


def location(object_id, pos_y, pos_x, host, token):
    kb = types.InlineKeyboardMarkup(row_width=2)
    keys = [
        types.InlineKeyboardButton('‚ùå –ó–∞–∫—Ä—ã—Ç—å', callback_data=f'cicada/{object_id}/location/close'),
        types.InlineKeyboardButton('–û–±–Ω–æ–≤–∏—Ç—å üîÑ', callback_data=f'cicada/{object_id}/location/update'),
        types.InlineKeyboardButton('üß≠ –í Google Maps', url=f'http://maps.google.com/maps?q={pos_y},{pos_x}'),
        types.InlineKeyboardButton('Wialon –õ–æ–∫–∞—Ç–æ—Ä üì°', url=f'{host}/locator/index.html?t={token}')
    ]
    return kb.add(*keys)


def commands(object_id, cmds):
    kb = types.InlineKeyboardMarkup(row_width=1)
    keys = [
        types.InlineKeyboardButton(f'{cmd["n"]} ‚ñ∂', callback_data=f'cicada/{object_id}/cmd/{cmd["p"]}')
        for cmd in cmds
    ]
    keys.append(types.InlineKeyboardButton('‚Ü© –ù–∞–∑–∞–¥', callback_data=f'cicada/{object_id}'))
    return kb.add(*keys)


def wiatags(wiatags):
    kb = types.InlineKeyboardMarkup(row_width=2)
    keys = [types.InlineKeyboardButton(i['nm'], callback_data=f'wiatag/{i["id"]}') for i in wiatags]
    kb.add(*keys)
    kb.row(types.InlineKeyboardButton('‚Ü© –ù–∞–∑–∞–¥', callback_data='start_cmd'),
           types.InlineKeyboardButton('–û–±–Ω–æ–≤–∏—Ç—å üîÑ', callback_data='wiatag'))
    return kb


def wiatags_new_qr(object_id):
    kb = types.InlineKeyboardMarkup(row_width=2)
    keys = [
        types.InlineKeyboardButton('‚Ü© –ù–∞–∑–∞–¥', callback_data=f'wiatag'),
        types.InlineKeyboardButton('–î–∞ üÜó', callback_data=f'wiatag/{object_id}/new'),
    ]
    return kb.add(*keys)